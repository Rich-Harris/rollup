import { writeFile } from 'node:fs/promises';
import { AST_NODES } from './ast-types.js';
import { lintFile } from './helpers.js';

const keysFile = new URL('../src/ast/keys.ts', import.meta.url);

/** @type {Record<string, Set<string>>} */
const nodeKeysByAstType = {};
for (const [name, node] of Object.entries(AST_NODES)) {
	const astType = node.astType || name;
	const keySet = (nodeKeysByAstType[astType] ||= new Set());
	for (const [fieldName, fieldType] of (node.hasSameFieldsAs
		? AST_NODES[node.hasSameFieldsAs].fields
		: node.fields) || []) {
		if (['NodeList', 'Node', 'OptionalNode'].includes(fieldType)) {
			keySet.add(fieldName);
		}
	}
}

const keys = `// This file is generated by scripts/generate-ast-converters.js.
// Do not edit this file directly.

export const keys: Record<string, string[]> = {
  ${Object.entries(nodeKeysByAstType)
		.sort(([astType1], [astType2]) => astType1.localeCompare(astType2))
		.map(([astType, keys]) => `${astType}: [${[...keys].map(key => `'${key}'`).join(', ')}]`)
		.join(',\n  ')}
};
`;

await writeFile(keysFile, keys);
await lintFile(keysFile);
